{"version":3,"sources":["../src/marker.js"],"names":["getMarker","hasMarker","markerSliceCode","replaceAll","removeMarkers","logger","require","commentOpen","commentClose","doxChar","spaces","spacesAny","markerNameFormat","keyValObject","marker","undefined","code","markers","parsedcode","markerlist","split","i","forEach","balise","pattern","regstr","reg","RegExp","res","match","warn","length","str","sub","replace","tag"],"mappings":"AAAA;AACA;;;;;;;;;;;;AAYA;;;;;QAcgBA,S,GAAAA,S;QAYAC,S,GAAAA,S;QAeAC,e,GAAAA,e;QA8CAC,U,GAAAA,U;QAQAC,a,GAAAA,a;AA9FhB,IAAMC,SAASC,QAAQ,eAAR,CAAf;AACA,IAAMC,cAAc,sBAApB;AACA,IAAMC,eAAe,aAArB;AACA,IAAMC,UAAU,QAAhB,C,CAA0B;AAC1B,IAAMC,SAAS,QAAf,C,CAAyB;AACzB,IAAMC,YAAY,MAAlB,C,CAA0B;AAC1B,IAAMC,mBAAmB,yBAAzB,C,CAAoD;;AAEpD;;;;;AAKO,SAASZ,SAAT,CAAmBa,YAAnB,EAAiC;AACpC,WAAOA,aAAaC,MAApB;AACH;;AAED;;;;;;;;AAQO,SAASb,SAAT,CAAmBY,YAAnB,EAAiC;AACpC,QAAMC,SAASd,UAAUa,YAAV,CAAf;AACA,WAAOC,WAAWC,SAAX,IAAwBD,WAAW,EAA1C;AACH;;AAED;;;;AAIA;;;;;;AAMO,SAASZ,eAAT,CAAyBc,IAAzB,EAA+BC,OAA/B,EAAwC;AAC3C,QAAIA,YAAYF,SAAZ,IAAyBE,YAAY,EAAzC,EAA6C;AACzC,eAAOD,IAAP;AACH;AACD,QAAIE,aAAa,EAAjB;AACA,QAAMC,aAAaF,QAAQG,KAAR,CAAc,GAAd,CAAnB;;AAEA,QAAIC,IAAI,CAAR;AACA;AACAF,eAAWG,OAAX,CAAmB,kBAAU;AACzB,YAAMC,SAAS,QAAQT,MAAR,GAAiB,KAAhC;AACA,YAAMU,UACF,QACAb,SADA,GAEAJ,WAFA,GAGAE,OAHA,GAIAC,MAJA,GAKAa,MALA,GAMAb,MANA,GAOAF,YAPA,GAQAE,MATJ;;AAWA,YAAMe,SAASD,UAAU,iBAAV,GAA8BA,OAA7C;AACA,YAAME,MAAM,IAAIC,MAAJ,CAAWF,MAAX,CAAZ;AACA,YAAMG,MAAMZ,KAAKa,KAAL,CAAWH,GAAX,CAAZ;;AAEA,YAAIE,GAAJ,EAAS;AACLV,0BAAcU,IAAI,CAAJ,CAAd,CADK,CACiB;AACzB,SAFD,MAEO;AACHvB,mBAAOyB,IAAP,CAAY,iCAAiChB,MAAjC,GAA0C,aAAtD;AACAI,0BAAc,oBAAoBJ,MAApB,GAA6B,aAA3C;AACH;AACD,YAAIK,WAAWY,MAAX,GAAoB,CAApB,IAAyBV,IAAIF,WAAWY,MAAX,GAAoB,CAArD,EAAwD;AACpDb,0BAAc,IAAd;AACH;AACDG;AACH,KA3BD;AA4BA,WAAOH,UAAP;AACH;;AAED;;;;;;AAMO,SAASf,UAAT,CAAoB6B,GAApB,EAAyBN,GAAzB,EAA8BO,GAA9B,EAAmC;AACtC,WAAOD,IAAIE,OAAJ,CAAY,IAAIP,MAAJ,CAAWD,GAAX,EAAgB,GAAhB,CAAZ,EAAkCO,GAAlC,CAAP;AACH;;AAED;;;;AAIO,SAAS7B,aAAT,CAAuBY,IAAvB,EAA6B;AAChC;AACA,QAAMmB,MAAM,QAAQvB,gBAAR,GAA2B,KAAvC;AACA,QAAMY,UACFb,YAAYJ,WAAZ,GAA0BE,OAA1B,GAAoCC,MAApC,GAA6CyB,GAA7C,GAAmDzB,MAAnD,GAA4DF,YAA5D,GAA2EE,MAD/E;;AAGA,WAAOP,WAAWa,IAAX,EAAiBQ,OAAjB,EAA0B,EAA1B,CAAP;AACH","file":"marker.js","sourcesContent":["// LICENSE : MIT\n/*\n * Feature: doxygen like snippet code.\n * For code source documenting, see\n * https://www.stack.nl/~dimitri/doxygen/manual/commands.html#cmdsnippet\n *\n * Gibook usage:\n *\n *      [import:<markername>](path/to/file)\n *\n * NB: markername must begin with a letter to avoid conflict with slice\n *     line range.\n */\n\"use strict\";\nconst logger = require(\"winston-color\");\nconst commentOpen = \"(/+/+|#|%|/\\\\*|<!--)\";\nconst commentClose = \"(\\\\*/|-->)?\";\nconst doxChar = \"[*!/#]\"; // doxygen documentation character\nconst spaces = \"[ \\t]*\"; // h spaces\nconst spacesAny = \"\\\\s*\"; // h+v spaces\nconst markerNameFormat = \"(\\\\s*[a-zA-Z][\\\\w\\\\s]*)\"; // Must contain a char.\n\n/*\n * format: [import:<markername>](path/to/file)\n * @param {Object} keyValObject\n * @return {string}\n */\nexport function getMarker(keyValObject) {\n    return keyValObject.marker;\n}\n\n/**\n * format: [import:<markername>](path/to/file)\n * check if the import filled has a markername.\n * @example:\n *      hasMarker(label)\n * @param {Object} keyValObject\n * @returns {boolean}\n */\nexport function hasMarker(keyValObject) {\n    const marker = getMarker(keyValObject);\n    return marker !== undefined && marker !== \"\";\n}\n\n/* Parse the code from given markers\n *\n * see test/marker-test.js\n */\n/**\n * get sliced code by {@link markername}\n * @param {string} code\n * @param {string} markers\n * @returns {string}\n */\nexport function markerSliceCode(code, markers) {\n    if (markers === undefined || markers === \"\") {\n        return code;\n    }\n    var parsedcode = \"\";\n    const markerlist = markers.split(\",\");\n\n    let i = 0;\n    // regex\n    markerlist.forEach(marker => {\n        const balise = \"\\\\[\" + marker + \"\\\\]\";\n        const pattern =\n            \"\\\\n\" +\n            spacesAny +\n            commentOpen +\n            doxChar +\n            spaces +\n            balise +\n            spaces +\n            commentClose +\n            spaces;\n\n        const regstr = pattern + \"\\\\n*([\\\\s\\\\S]*)\" + pattern;\n        const reg = new RegExp(regstr);\n        const res = code.match(reg);\n\n        if (res) {\n            parsedcode += res[3]; // count parenthesis in pattern.\n        } else {\n            logger.warn(\"markersSliceCode(): marker `\" + marker + \"` not found\");\n            parsedcode += \"Error: marker `\" + marker + \"` not found\";\n        }\n        if (markerlist.length > 0 && i < markerlist.length - 1) {\n            parsedcode += \"\\n\";\n        }\n        i++;\n    });\n    return parsedcode;\n}\n\n/** Replace all regex occurence by sub in the string str,\n * @param {string} str\n * @param {string} reg\n * @param {string} sub\n * @return {string}\n */\nexport function replaceAll(str, reg, sub) {\n    return str.replace(new RegExp(reg, \"g\"), sub);\n}\n\n/** Function that remove all markers in the given code\n * @param {string} code\n * @return {string}\n */\nexport function removeMarkers(code) {\n    // various language comment\n    const tag = \"\\\\[\" + markerNameFormat + \"\\\\]\";\n    const pattern =\n        spacesAny + commentOpen + doxChar + spaces + tag + spaces + commentClose + spaces;\n\n    return replaceAll(code, pattern, \"\");\n}\n"]}