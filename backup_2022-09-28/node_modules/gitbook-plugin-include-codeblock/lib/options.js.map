{"version":3,"sources":["../src/options.js"],"names":["convertValue","checkMapTypes","initOptions","logger","require","path","cfg","gitbook","properties","defaultTemplateMap","Object","freeze","default","join","__dirname","full","ace","acefull","defaultBookOptionsMap","check","edit","lang","fixlang","template","theme","unindent","defaultKeyValueMap","class","id","marker","name","title","valstr","valtype","JSON","parse","kvMap","funcLabel","keys","forEach","key","undefined","leftType","rightType","error","options","dbom","kv","assign","kvmap"],"mappings":"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","file":"options.js","sourcesContent":["// LICENSE : MIT\n// Notes:\n// 1) If you add new options type, you have to update type checks in parser.js\n// (see parseVariableFromMap).\n// 2) The default map (objects) are immutable (frozen). They are updated (new map\n// with different names) while parsing book.json options first, then eventually\n// overwriten by commands options.\n\"use strict\";\nconst logger = require(\"winston-color\");\nconst path = require(\"path\");\nconst cfg = require(\"../package.json\").gitbook.properties;\n\nexport const defaultTemplateMap = Object.freeze({\n    default: path.join(__dirname, \"..\", \"templates\", \"default-template.hbs\"),\n    full: path.join(__dirname, \"..\", \"templates\", \"full-template.hbs\"),\n    ace: path.join(__dirname, \"..\", \"templates\", \"ace-template.hbs\"),\n    acefull: path.join(__dirname, \"..\", \"templates\", \"acefull-template.hbs\")\n});\n\n// Map for Book.json options. (avoid `undefined` for ace options),\n// NB: Default book option, type, desc are set in the package.json file.\nexport const defaultBookOptionsMap = Object.freeze({\n    check: cfg.check.default,\n    edit: cfg.edit.default,\n    lang: cfg.lang.default,\n    fixlang: cfg.fixlang.default,\n    template: cfg.template.default,\n    theme: cfg.theme.default,\n    unindent: cfg.unindent.default\n});\n\n// Possible command key-values (kv).\n// (avoid undefined default value because we check value types).\nexport const defaultKeyValueMap = Object.freeze({\n    // Local\n    class: \"\",\n    id: \"\",\n    marker: \"\",\n    name: \"\",\n    title: \"\",\n    // Global/Local\n    check: defaultBookOptionsMap.check,\n    edit: defaultBookOptionsMap.edit,\n    lang: defaultBookOptionsMap.lang,\n    fixlang: defaultBookOptionsMap.fixlang,\n    template: defaultBookOptionsMap.template,\n    theme: defaultBookOptionsMap.theme,\n    unindent: defaultBookOptionsMap.unindent\n});\n\n/**\n * Convert string value to value type.\n * @param {string} valtype\n */\nexport function convertValue(valstr, valtype) {\n    // remove quotes\n    if (valtype === \"boolean\" || valtype === \"number\") {\n        return JSON.parse(valstr);\n    }\n    return valstr;\n}\n\n/**\n * Check that maps types equal to default key value map.\n * @param {object} kvMap\n * @param {string} funcLabel\n */\nexport function checkMapTypes(kvMap, funcLabel) {\n    Object.keys(kvMap).forEach(key => {\n        if (defaultKeyValueMap[key] !== undefined) {\n            const leftType = typeof kvMap[key];\n            const rightType = typeof defaultKeyValueMap[key];\n            if (!(leftType === rightType)) {\n                logger.error(\n                    `include-codeblock: checkMapTypes (${funcLabel}) : wrong value type for key \\`${key}\\`: key type: \\`${leftType}\\` (!= \\`${rightType}\\`)`\n                );\n            }\n        }\n    });\n}\n\n/**\n * Check that maps types equal to default key value map.\n * @param {{template?: string}} options\n * @return {object} kvMap\n */\nexport function initOptions(options) {\n    const dbom = defaultBookOptionsMap;\n    const kv = Object.assign({}, defaultKeyValueMap);\n    // Overwrite default value with user book options.\n    Object.keys(dbom).forEach(key => {\n        if (options[key] != undefined) {\n            kv[key] = convertValue(options[key], typeof dbom[key]);\n        }\n    });\n    const kvmap = Object.freeze(kv);\n    checkMapTypes(kvmap, \"initOptions\");\n    return kvmap;\n}\n"]}