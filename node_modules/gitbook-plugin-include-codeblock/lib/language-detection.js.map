{"version":3,"sources":["../src/language-detection.js"],"names":["languageAceModeFix","lookupLanguageByAceMode","lookupLanguageByExtension","getLang","path","require","languageMap","logger","resultAceMode","kvMap","matchLang","lang","Object","keys","some","aceMode","langKey","undefined","filePath","ext","matchext","exec","extname","extensions","extension","warn","fixlang","kvm","assign","freeze"],"mappings":"AAAA;AACA;;;;;QAUgBA,kB,GAAAA,kB;QAYAC,uB,GAAAA,uB;QAqBAC,yB,GAAAA,yB;QAiCAC,O,GAAAA,O;;AAxEhB;;AAHA,IAAMC,OAAOC,QAAQ,MAAR,CAAb;AACA,IAAMC,cAAcD,QAAQ,cAAR,CAApB;AACA,IAAME,SAASF,QAAQ,eAAR,CAAf;;;AAGA;AACA;AACA;AACA;AACO,SAASL,kBAAT,CAA4BQ,aAA5B,EAA2C;AAC9C,QAAIA,iBAAiB,OAArB,EAA8B;AAC1BA,wBAAgB,KAAhB;AACH;AACD,WAAOA,aAAP;AACH;;AAED;;;;;AAKO,SAASP,uBAAT,CAAiCQ,KAAjC,EAAwC;AAC3C,QAAID,sBAAJ;AACA,QAAME,YAAYD,MAAME,IAAxB;AACAC,WAAOC,IAAP,CAAYP,WAAZ,EAAyBQ,IAAzB,CAA8B,mBAAW;AACrC,YAAMC,UAAUT,YAAYU,OAAZ,EAAqBD,OAArC;AACA,YAAIL,cAAcK,OAAlB,EAA2B;AACvBP,4BAAgBO,OAAhB;AACA,mBAAOP,aAAP;AACH;AACD,eAAOS,SAAP;AACH,KAPD;AAQA,WAAOT,aAAP;AACH;;AAED;;;;;;;AAOO,SAASN,yBAAT,CAAmCO,KAAnC,EAA0CS,QAA1C,EAAoD;AACvD,QAAMP,OAAOF,MAAME,IAAnB;AACA,QAAIQ,YAAJ;AACA;AACA,QAAMC,WAAW,QAAQC,IAAR,CAAaV,IAAb,CAAjB;AACA,QAAIS,YAAY,IAAhB,EAAsB;AAClBD,cAAMC,SAAS,CAAT,CAAN;AACH,KAFD,MAEO;AACH;AACAD,cAAMf,KAAKkB,OAAL,CAAaJ,QAAb,CAAN;AACH;AACD,QAAIH,gBAAJ;AACAH,WAAOC,IAAP,CAAYP,WAAZ,EAAyBQ,IAAzB,CAA8B,mBAAW;AACrC,YAAMS,aAAajB,YAAYU,OAAZ,EAAqBO,UAAxC;AACA,YAAI,CAACA,UAAL,EAAiB;AACb,mBAAO,KAAP;AACH;AACD,eAAOA,WAAWT,IAAX,CAAgB,qBAAa;AAChC,gBAAIK,QAAQK,SAAZ,EAAuB;AACnBT,0BAAUT,YAAYU,OAAZ,EAAqBD,OAA/B;AACH;AACD,mBAAO,KAAP;AACH,SALM,CAAP;AAMH,KAXD;AAYA,WAAOA,OAAP;AACH;;AAED;;;;;;AAMO,SAASZ,OAAT,CAAiBM,KAAjB,EAAwBS,QAAxB,EAAkC;AACrC,QAAIH,gBAAJ;AACA;AACA,QAAIN,MAAME,IAAN,KAAe,4BAAmBA,IAAtC,EAA4C;AACxCI,kBAAUd,wBAAwBQ,KAAxB,CAAV;AACH;AACD;AACA,QAAIM,YAAYE,SAAhB,EAA2B;AACvBF,kBAAUb,0BAA0BO,KAA1B,EAAiCS,QAAjC,CAAV;AACH;AACD;AACA,QAAIH,YAAYE,SAAhB,EAA2B;AACvBV,eAAOkB,IAAP,CAAY,0CAA0ChB,MAAME,IAAhD,GAAuD,gBAAnE;AACA,eAAOF,KAAP;AACH;AACD,QAAIA,MAAMiB,OAAV,EAAmB;AACfX,kBAAUf,mBAAmBe,OAAnB,CAAV;AACH;AACD,QAAMY,MAAMf,OAAOgB,MAAP,CAAc,EAAd,EAAkBnB,KAAlB,CAAZ;AACAkB,QAAIhB,IAAJ,GAAWI,OAAX;AACA,WAAOH,OAAOiB,MAAP,CAAcF,GAAd,CAAP;AACH","file":"language-detection.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\nconst path = require(\"path\");\nconst languageMap = require(\"language-map\");\nconst logger = require(\"winston-color\");\nimport { defaultKeyValueMap } from \"./options.js\";\n\n// Workaround for not working languages.\n// Redefine aceMode locally.\n// @param {string}\n// @return {string}\nexport function languageAceModeFix(resultAceMode) {\n    if (resultAceMode == \"c_cpp\") {\n        resultAceMode = \"cpp\";\n    }\n    return resultAceMode;\n}\n\n/**\n * Return aceMode from lang in kvMap.\n * @param {object} kvMap\n * @return {object}\n */\nexport function lookupLanguageByAceMode(kvMap) {\n    let resultAceMode;\n    const matchLang = kvMap.lang;\n    Object.keys(languageMap).some(langKey => {\n        const aceMode = languageMap[langKey].aceMode;\n        if (matchLang === aceMode) {\n            resultAceMode = aceMode;\n            return resultAceMode;\n        }\n        return undefined;\n    });\n    return resultAceMode;\n}\n\n/**\n * Return aceMode from file extension or lang in kvMap, if is\n * an extension.\n * @param {object} kvMap\n * @param {string} filePath\n * @return {object}\n */\nexport function lookupLanguageByExtension(kvMap, filePath) {\n    const lang = kvMap.lang;\n    let ext;\n    // Check first if map `lang` is an extension string.\n    const matchext = /(.+)/g.exec(lang);\n    if (matchext != null) {\n        ext = matchext[1];\n    } else {\n        // Load from file extension.\n        ext = path.extname(filePath);\n    }\n    let aceMode;\n    Object.keys(languageMap).some(langKey => {\n        const extensions = languageMap[langKey].extensions;\n        if (!extensions) {\n            return false;\n        }\n        return extensions.some(extension => {\n            if (ext === extension) {\n                aceMode = languageMap[langKey].aceMode;\n            }\n            return false;\n        });\n    });\n    return aceMode;\n}\n\n/**\n * Update key-value map lang with aceMode lang.\n * @param {object} kvMap\n * @param {string} filePath\n * @return {object}\n */\nexport function getLang(kvMap, filePath) {\n    let aceMode;\n    // Retrieve ace mode from lang.\n    if (kvMap.lang !== defaultKeyValueMap.lang) {\n        aceMode = lookupLanguageByAceMode(kvMap);\n    }\n    // Retrieve ace mode from file ext or lang ext.\n    if (aceMode === undefined) {\n        aceMode = lookupLanguageByExtension(kvMap, filePath);\n    }\n    // Ace mode not found, keep default.\n    if (aceMode === undefined) {\n        logger.warn(\"include-codeblock: unknown language `\" + kvMap.lang + \"`, use default\");\n        return kvMap;\n    }\n    if (kvMap.fixlang) {\n        aceMode = languageAceModeFix(aceMode);\n    }\n    const kvm = Object.assign({}, kvMap);\n    kvm.lang = aceMode;\n    return Object.freeze(kvm);\n}\n"]}