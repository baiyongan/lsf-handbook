{"version":3,"sources":["../src/template.js"],"names":["readFileFromPath","getTemplateContent","fs","require","logger","path","content","readFileSync","err","code","warn","kvMap","t","template","dt","tPath","dtPath","isTemplateDefault","isTemplatePath","undefined","p"],"mappings":"AAAA;AACA;;;;;QAUgBA,gB,GAAAA,gB;QAoBAC,kB,GAAAA,kB;;AA3BhB;;AAFA,IAAMC,KAAKC,QAAQ,IAAR,CAAX;AACA,IAAMC,SAASD,QAAQ,eAAR,CAAf;;;AAGA;;;;;AAKO,SAASH,gBAAT,CAA0BK,IAA1B,EAAgC;AACnC,QAAIC,gBAAJ;AACA,QAAI;AACAA,kBAAUJ,GAAGK,YAAH,CAAgBF,IAAhB,EAAsB,MAAtB,CAAV;AACH,KAFD,CAEE,OAAOG,GAAP,EAAY;AACV,YAAIA,IAAIC,IAAJ,KAAa,QAAjB,EAA2B;AACvBL,mBAAOM,IAAP,CAAY,4BAA4BL,IAAxC;AACA,mBAAO,4BAA4BA,IAAnC;AACH,SAHD,MAGO;AACH,kBAAMG,GAAN;AACH;AACJ;AACD,WAAOF,OAAP;AACH;;AAED;;;;;AAKO,SAASL,kBAAT,CAA4BU,KAA5B,EAAmC;AACtC,QAAMC,IAAID,MAAME,QAAhB;AACA,QAAMC,KAAK,+BAAsBD,QAAjC;AACA,QAAME,QAAQ,4BAAmBH,CAAnB,CAAd;AACA,QAAMI,SAAS,4BAAmBF,EAAnB,CAAf;;AAEA,QAAMG,oBAAoBL,MAAME,EAAhC;AACA,QAAMI,iBAAiBH,UAAUI,SAAjC;;AAEA,QAAIC,UAAJ;AACA;AACA,QAAIH,iBAAJ,EAAuB;AACnBG,YAAIJ,MAAJ;AACH,KAFD,MAEO,IAAIE,cAAJ,EAAoB;AACvB;AACAE,YAAIR,CAAJ;AACH,KAHM,MAGA;AACH;AACAQ,YAAIL,SAASC,MAAb;AACH;AACD,WAAOhB,iBAAiBoB,CAAjB,CAAP;AACH","file":"template.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\nconst fs = require(\"fs\");\nconst logger = require(\"winston-color\");\nimport { defaultBookOptionsMap, defaultTemplateMap } from \"./options.js\";\n\n/**\n * Sunc file read with path check\n * @param {string} path\n * @return {string}\n */\nexport function readFileFromPath(path) {\n    let content;\n    try {\n        content = fs.readFileSync(path, \"utf8\");\n    } catch (err) {\n        if (err.code === \"ENOENT\") {\n            logger.warn(\"Error: file not found: \" + path);\n            return \"Error: file not found: \" + path;\n        } else {\n            throw err;\n        }\n    }\n    return content;\n}\n\n/**\n * Load template from template label\n * @param {object} kvMap\n * @return {string}\n */\nexport function getTemplateContent(kvMap) {\n    const t = kvMap.template;\n    const dt = defaultBookOptionsMap.template;\n    const tPath = defaultTemplateMap[t];\n    const dtPath = defaultTemplateMap[dt];\n\n    const isTemplateDefault = t === dt;\n    const isTemplatePath = tPath === undefined;\n\n    let p;\n    // No template option.\n    if (isTemplateDefault) {\n        p = dtPath;\n    } else if (isTemplatePath) {\n        // Template option is a path.\n        p = t;\n    } else {\n        // Template option one of template/ directory.\n        p = tPath || dtPath;\n    }\n    return readFileFromPath(p);\n}\n"]}